// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SkillSwapMainService.Migrations
{
    [DbContext(typeof(SkillSwapDbContext))]
    [Migration("20231203182019_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SkillSwapMainService.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryID"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Listing", b =>
                {
                    b.Property<int>("ListingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListingID"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ListingID");

                    b.HasIndex("SkillID");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillID"));

                    b.Property<int>("CategoryID")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("integer");

                    b.HasKey("SkillID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionID"));

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("OfferedSkillID")
                        .HasColumnType("integer");

                    b.Property<int>("OffererUserID")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivedSkillID")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiverUserID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("isComplete")
                        .HasColumnType("boolean");

                    b.HasKey("TransactionID");

                    b.HasIndex("OfferedSkillID");

                    b.HasIndex("ReceivedSkillID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Listing", b =>
                {
                    b.HasOne("SkillSwapMainService.Models.Skill", "Skill")
                        .WithMany("Listings")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Skill", b =>
                {
                    b.HasOne("SkillSwapMainService.Models.Category", "Category")
                        .WithMany("Skills")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Transaction", b =>
                {
                    b.HasOne("SkillSwapMainService.Models.Skill", "OfferedSkill")
                        .WithMany("OfferedSkill")
                        .HasForeignKey("OfferedSkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillSwapMainService.Models.Skill", "ReceivedSkill")
                        .WithMany("ReceivedSkill")
                        .HasForeignKey("ReceivedSkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfferedSkill");

                    b.Navigation("ReceivedSkill");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Category", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("SkillSwapMainService.Models.Skill", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("OfferedSkill");

                    b.Navigation("ReceivedSkill");
                });
#pragma warning restore 612, 618
        }
    }
}
